// Generated by CoffeeScript 1.3.3

/*
# By Draco Li $$$
*/


(function() {
  var DEBUG, DLog, FactsManager, Request, data, notifications, pageMod, panels, simpleStorage, tabs, widgets;

  widgets = require('widget');

  pageMod = require('page-mod');

  tabs = require('tabs');

  data = require('self').data;

  panels = require('panel');

  simpleStorage = require('simple-storage');

  notifications = require('notifications');

  Request = require('request').Request;

  DEBUG = true;

  DLog = function(content) {
    if (DEBUG) {
      return console.log(console);
    }
  };

  FactsManager = (function() {
    var _instance;

    FactsManager.prototype.MINIMUM_FACTS_COUNT = 50;

    FactsManager.prototype.MAX_STORED = 200;

    FactsManager.prototype.factPages = [];

    FactsManager.prototype.storage = simpleStorage.storage;

    FactsManager.prototype.factsUrl = 'http://simple-planet-5852.herokuapp.com/facts?format=json&count=80';

    FactsManager.prototype.isEnabled = true;

    FactsManager.prototype.facts = [];

    FactsManager.prototype.readFacts = {
      'count': 0
    };

    _instance = null;

    FactsManager.instance = function() {
      return _instance != null ? _instance : _instance = new this;
    };

    function FactsManager() {
      if (!this.storage.pluginEnabled) {
        this.updateEnabled(this.isEnabled);
      }
      this.isEnabled = this.storage.pluginEnabled;
      this.facts = this.storage.facts || this.facts;
      this.readFacts = this.storage.readFacts || this.readFacts;
      this.fetchFactsIfRequired();
    }

    FactsManager.prototype.updatePages = function(message) {
      var page, _i, _len, _ref, _results;
      _ref = this.factPages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        page = _ref[_i];
        _results.push(page.postMessage(message));
      }
      return _results;
    };

    FactsManager.prototype.detachWorker = function(worker) {
      var index;
      index = this.factPages.indexOf(worker);
      if (index !== -1) {
        return this.factPages.splice(index, 1);
      }
    };

    FactsManager.prototype.fetchFactsIfRequired = function() {
      if (this.facts.length < this.MINIMUM_FACTS_COUNT) {
        return this.fetchFacts();
      }
    };

    FactsManager.prototype.getFact = function() {
      var targetFact;
      this.fetchFactsIfRequired();
      targetFact = this.facts.splice(0, 1)[0];
      while (this.isReadFact(targetFact)) {
        targetFact = this.facts.splice(0, 1)[0];
      }
      DLog("Got fact: " + targetFact.content);
      this.saveReadFact(targetFact);
      this.saveFacts();
      return targetFact;
    };

    FactsManager.prototype.fetchFacts = function(callback) {
      var _this = this;
      if (callback == null) {
        callback = null;
      }
      DLog('fetching facts');
      return Request({
        url: this.factsUrl,
        onComplete: function(response) {
          console.log('completed fetch');
          if (response.status === 200) {
            _this.facts = _this.facts.concat(response.json);
            _this.saveFacts();
            if (callback != null) {
              return callback(_this.facts);
            }
          }
        }
      }).get();
    };

    FactsManager.prototype.updateEnabled = function(value) {
      this.storage.pluginEnabled = value;
      this.isEnabled = value;
      if (value === 'true') {
        return DLog('true that');
      }
    };

    FactsManager.prototype.saveFacts = function() {
      return this.storage.facts = this.facts;
    };

    FactsManager.prototype.saveReadFacts = function() {
      return this.storage.readFacts = this.readFacts;
    };

    FactsManager.prototype.getWidgetImage = function() {
      if (this.isEnabled) {
        return data.url('images/plugin-on.png');
      } else {
        return data.url('images/plugin-off.png');
      }
    };

    FactsManager.prototype.isReadFact = function(fact) {
      if (this.readFacts[fact.id] != null) {
        return true;
      } else {
        return false;
      }
    };

    FactsManager.prototype.clearReadFactsIfRequired = function() {
      if (this.readFacts["count"] > this.MAX_STORED) {
        this.readFacts = {
          "count": 0
        };
        return this.saveReadFacts();
      }
    };

    FactsManager.prototype.saveReadFact = function(fact) {
      this.readFacts[fact.id] = true;
      this.readFacts["count"] += 1;
      this.saveReadFacts();
      return this.clearReadFactsIfRequired();
    };

    return FactsManager;

  })();

  exports.main = function() {
    var contentPage, fM, popupPanel, widget;
    fM = FactsManager.instance();
    popupPanel = panels.Panel({
      width: 240,
      height: 110,
      contentURL: data.url('html/popup.html'),
      contentScriptFile: [data.url('js/jquery-1.7.2.min.js'), data.url('js/iphone-style-checkboxes.js'), data.url('js/popup.js')],
      onMessage: function(message) {
        var actionUrl, email, subject, _ref;
        if (message.type === 'pluginEnabled') {
          fM.updateEnabled(message.value);
          fM.updatePages({
            isEnabled: message.value
          });
          return widget.contentURL = fM.getWidgetImage();
        } else if (message.type === 'sendEmail') {
          _ref = message.value, email = _ref.email, subject = _ref.subject;
          actionUrl = "mailto:" + email + "?";
          actionUrl += "subject=" + (encodeURIComponent(subject));
          return tabs.open({
            url: actionUrl,
            inNewWindow: true
          });
        }
      },
      onShow: function() {
        return this.postMessage({
          type: 'pluginEnabled',
          value: fM.isEnabled
        });
      }
    });
    widget = widgets.Widget({
      id: 'toggle-popup',
      label: 'Awesome Facts',
      contentURL: fM.getWidgetImage(),
      panel: popupPanel
    });
    contentPage = pageMod.PageMod({
      include: ['*'],
      contentScriptWhen: 'start',
      contentScriptFile: [data.url('js/jquery-1.7.2.min.js'), data.url('js/jquery.noty.js'), data.url('js/bootstrap-tooltip.js'), data.url('js/content.js')],
      onAttach: function(worker) {
        fM.factPages.push(worker);
        worker.on('detach', function() {
          return fM.detachWorker(this);
        });
        worker.port.on('getFact', function() {
          return worker.postMessage({
            fact: fM.getFact()
          });
        });
        worker.port.on('getEnabled', function() {
          return worker.postMessage({
            isEnabled: fM.isEnabled
          });
        });
        if (worker != null) {
          return worker.postMessage({
            css: data.load('css/jquery.noty.css') + data.load('css/noty_theme_facebook.css') + data.load('css/content.css')
          });
        }
      }
    });
    simpleStorage.on('OverQuota', function() {
      return notifications.notify({
        title: 'Storage Space Exceeded',
        text: 'More storage space required'
      });
    });
    return null;
  };

}).call(this);
